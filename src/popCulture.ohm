popCulture {
Program     = Statement*
Statement   = let id "=" Exp ";"                          -- vardec
              | function id "(" Params ")" "=" Exp ";"    -- fundec
              | id "=" Exp ";"                            -- assign
              | print Exp ";"                             -- print
              | while Exp Block                           -- while

Block       = "{" Statement+ "}"

Exp         =  Exp ("+" | "-") Exp1                       -- binary
              |  Exp ("*") Exp1                           -- binary 
              |  Exp1
Exp1        =  Exp2 "&&" Exp2                             -- binary
              |  Exp2
Exp2        =  Exp2 ("<="|"<"|"=="|"!="|">="|">") Exp3    -- binary
              |  Exp3
Exp3        =  Exp3   Exp4                                -- binary
              |  Exp4
Exp4        =  Exp4 ("/" | "%") Exp5                      -- binary
              |  Exp5
Exp5        =  Exp6 "^" Exp6                              -- binary
              |  Exp6
Exp6        =  Exp7 "**" Exp7                             -- binary
              |  Exp7
Exp7        = num
              | Call
              | id
              | "(" Exp ")"                               -- parens  

Call         = id "(" Args ")"                           
Params       =  ListOf<id, ",">
Arg          =  id ":" Exp
Args         =  ListOf<Arg, ",">

let          = "lit" ~alnum
print        = "sayItWithYourChest " ~alnum
break        = "give me a break "  ~alnum
continue     = "thank u next"   ~alnum
while        = "say less " ~alnum
if           = "as if" ~alnum
else if      = "ugh, as i " ~alnum
else         = "ugh" ~alnum
function     = "whatsYourFuncion" ~alnum
push         = "pushinP" ~alnum
singleLnCmt  = "shh" ~alnum
keyword      = let | print | break | continue | while | if | 
                else if | else | function | push | singleLnCmt

id           =  ~keyword (letter | "_") (letter | digit | "_")*
space       +=  " " | "\t" | comment
comment      =  singleLnCmt (~"\n" any)*                   -- singleLineComment
               | " '''' "                                  -- multilineComment
}
