popCulture {

    Program     = Statement+
    Statement   = (let | const) id "=" Exp ";"                  -- vardec
                | function id "(" Params ")" Block ";"          -- fundec
                | id "=" Exp ";"                                -- assign
                | print Exp ";"                                 -- print
                | Exp9_call ";"                                 -- call
                | LoopStmt                 
                | IfStmt                      
                | return Exp* ";"                               -- return
                | break ";"                                     -- break
                                                

    Block       = "{" Statement* "}"
    IfStmt      = if Exp Block else (Block | IfStmt)            -- long
                | if Exp Block                                  -- short
                
    LoopStmt    = while Exp Block                               -- while
                | for id in Exp Block                           -- for

    Exp         = Exp1 "?" Exp1 ":" Exp                         -- conditional
                | Exp1
    Exp1        = Exp1 "??" Exp2                                -- unwrapelse
                | Exp2
    Exp2        = Exp3 ("||" Exp3)+                             -- or
                | Exp3 ("&&" Exp3)+                             -- and
                | Exp3
    Exp3        = Exp4 ("|" Exp4)+                              -- bitor
                | Exp4 ("^" Exp4)+                              -- bitxor
                | Exp4 ("&" Exp4)+                              -- bitand
                | Exp4
    Exp4        = Exp5 ("<="|"<"|"=="|"!="|">="|">") Exp5       -- compare
                | Exp5
    Exp5        = Exp5 ("<<" | ">>") Exp6                       -- shift
                | Exp6
    Exp6        = Exp6 ("+" | "-") Exp7                         -- add
                | Exp7
    Exp7        = Exp7 ("*"| "/" | "%") Exp8                    -- multiply
                | Exp8
    Exp8        = Exp9 "**" Exp8                                -- power
                | Exp9
                | ("#" | "-" | "!" ) Exp9                       -- unary
    Exp9        = Exp9 ("[" | "?[") Exp "]"                     -- subscript
                | Exp9 ("(" | "?(") Args ")"                    -- call
                | num
                | id                                            -- id
                | string                                        -- string
                | true
                | false
                | "[" "]"                                       -- emptyarray
                | "[" NonemptyListOf<Exp, ","> "]"              -- arrayexp
                | "(" Exp ")"                                   -- parens   


    Call         = id "(" Args ")"                           
    Params       =  ListOf<id, ",">
    Arg          =  Exp
    Args         =  ListOf<Arg, ",">
    string       = "\"" (~"\"" ~"\n" any)* "\""

    let          = "lit" ~alnum
    const        = "stickIt" ~alnum
    print        = "sayItWithYourChest" ~alnum
    break        = "period"  ~alnum
    continue     = "thankUNext"   ~alnum
    while        = "sayLess" ~alnum
    for          = "keepItUp" ~alnum
    in           = "innit" ~alnum
    if           = "as if" ~alnum
    elseif       = "ugh, as if" ~alnum
    else         = "ugh" ~alnum
    function     = "whatsYourFunction" ~alnum
    push         = "pushinP" ~alnum
    singleLnCmt  = "shh" ~alnum
    return       = "gimmeDat" ~alnum
    true         = "forRealz" ~alnum
    false        = "urDone" ~alnum
    keyword      = let | const | print | return | break | continue | while |
                    for | in | if | elseif | else | function | push 
                    | singleLnCmt | true | false

    num          = digit+ 
    id           =  ~keyword (letter | "_") (letter | digit | "_")*
    space       +=  " " | "\t" | comment
    comment      =  singleLnCmt (~"\n" any)*                     -- singleLineComment
                | " '''' "                                       -- multilineComment

}

